from collections import deque

def can_transport(graph, N, S, T, max_weight):
    queue = deque([S])
    visited = set([S])
    
    while queue:
        node = queue.popleft()
        if node == T:
            return True
        for neighbor, weight in graph[node]:
            if neighbor not in visited and weight >= max_weight:
                visited.add(neighbor)
                queue.append(neighbor)
    
    return False

def max_bandwidth(N, M, edges, S, T):
    edges.sort(key=lambda x: -x[2])
    
    left, right = 1, edges[0][2]
    ans = left
    
    while left <= right:
        mid = (left + right) // 2
        graph = {i: [] for i in range(1, N+1)}
        for u, v, w in edges:
            if w >= mid:
                graph[u].append((v, w))
                graph[v].append((u, w))
        
        if can_transport(graph, N, S, T, mid):
            ans = mid
            left = mid + 1
        else:
            right = mid - 1 
    
    return ans

N, M = map(int, input().split())
edges = [tuple(map(int, input().split())) for _ in range(M)]
S, T = map(int, input().split())

print(max_bandwidth(N, M, edges, S, T))
