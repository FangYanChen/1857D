import numpy as np

INF = float('inf')

def floyd_warshall(graph):
      num_vertices = len(graph)
      dist = np.array(graph, dtype=float)  
      next_node = [[-1 if graph[i][j] == INF else j for j in range(num_vertices)] for i in range(num_vertices)]
      
  
      for k in range(num_vertices):
            for i in range(num_vertices):
                  for j in range(num_vertices):
                        if dist[i][k] + dist[k][j] < dist[i][j]:
                              dist[i][j] = dist[i][k] + dist[k][j]
                              next_node[i][j] = next_node[i][k]
      
      return dist, next_node

def reconstruct_path(next_node, start, end):
      if next_node[start][end] == -1:
            return [] 
      path = [start]
      while start != end:
            start = next_node[start][end]
            path.append(start)
      return path

def find_max_paths(dist):
      max_paths = []
      for i in range(len(dist)):
            for j in range(len(dist)):
                  if dist[i][j] != INF and i != j:
                        max_paths.append((i, j, dist[i][j]))
      max_paths.sort(key=lambda x: -x[2])  
      return max_paths[:2]  

graph = [
      [0, 2, INF, INF, INF, INF, INF, 5, INF, 5, INF, INF, 6, 5],
      [2, 0, INF, INF, INF, INF, 4, INF, 3, INF, INF, INF, INF, INF],
      [INF, INF, 0, 7, INF, INF, INF, INF, INF, INF, INF, 11, INF, INF],
      [INF, INF, 7, 0, 4, INF, INF, INF, INF, INF, INF, INF, INF, INF],
      [INF, INF, INF, 4, 0, 9, INF, 4, INF, INF, INF, INF, INF, INF],
      [INF, INF, INF, INF, 9, 0, 10, INF, 9, INF, 8, INF, INF, INF],
      [INF, 4, INF, INF, INF, 10, 0, 6, INF, INF, INF, INF, INF, INF],
      [5, INF, INF, INF, 4, INF, 6, 0, INF, INF, INF, INF, INF, INF],
      [INF, 3, INF, INF, INF, 9, INF, INF, 0, INF, 3, INF, INF, INF],
      [5, INF, INF, INF, INF, INF, INF, INF, INF, 0, INF, INF, INF, INF],
      [INF, INF, INF, INF, INF, 8, INF, INF, 3, INF, 0, INF, INF, INF],
      [INF, INF, 11, INF, INF, INF, INF, INF, INF, INF, INF, 0, INF, INF],
      [6, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, 0, INF],
      [5, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, INF, 0]
]

dist, next_node = floyd_warshall(graph)

print("Матрица кратчайших расстояний:")
print(dist)

max_paths = find_max_paths(dist)
print("\nДва максимальных пути:")
for start, end, length in max_paths:
    print(f"Путь {start + 1} -> {end + 1}, Длина: {length}, Маршрут: {reconstruct_path(next_node, start, end)}")
